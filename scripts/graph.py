#!/usr/bin/python3
import os
import json
import networkx as nx
from bs4 import BeautifulSoup
from networkx.classes import graph

def list_blog_posts(blog_directory):
    """
    Returns a list of all the blog post slugs generated by Hugo in the build process, i.e.,
    not the titles of blog posts but the string used to identify the blog post in its URL.

    Args:
        blog_directory (str): the path to the /public/blog sub-directory of the Hugo project.

    Returns:
        list: a list of the blog post slugs in the blog_directory, in str form.
    """

    return [ directory for directory in os.listdir(blog_directory) if os.path.isdir(os.path.join(blog_directory, directory)) ]


def extract_title(blog_post, blog_directory):
    """
    Extracts the title of the given blog post from its HTML.

    Args:
        blog_post (str): the blog post slug in the blog_directory.
        blog_directory (str): the path to the /public/blog sub-directory of the Hugo project.

    Returns:
        str: the title of the blog post.
    """

    with open(blog_directory + "/" + blog_post + "/index.html", "r", encoding="utf-8") as file:
        soup = BeautifulSoup(file, "html.parser")
        title_element = soup.find(id="blogpost-title")
        return title_element.get_text()


def extract_tags(blog_post, blog_directory):
    """
    Extracts the tags of the given blog post from its HTML.

    Args:
        blog_post (str): the blog post slug in the blog_directory.
        blog_directory (str): the path to the /public/blog sub-directory of the Hugo project.

    Returns:
        list: a list of str tags.
    """

    with open(blog_directory + "/" + blog_post + "/index.html", "r", encoding="utf-8") as file:
        soup = BeautifulSoup(file, "html.parser")
        tags_div = soup.find("div", id="tags")
        tag_links = tags_div.find_all("a")
        return ["".join(str(child).lower() for child in a.contents) for a in tag_links]


def build_affiliation_network(blog_posts, blog_directory):
    """
    Builds an affiliation network consisting of a bipartite node set of blog post
    nodes & tag nodes, with an edge between two nodes if the blog post has that tag.

    Args:
        blog_posts (list): a list of the blog post slugs in the blog_directory, in str form.
        blog_directory (str): the path to the /public/blog sub-directory of the Hugo project.

    Returns:
        networkx.classes.graph.Graph: a networkx graph object representing the affiliation networka
    """

    graph = nx.Graph()

    for blog_post in blog_posts:
        title = extract_title(blog_post, blog_directory)
        graph.add_node(blog_post, title=title)

        tags = extract_tags(blog_post, blog_directory)
        graph.add_edges_from([ (blog_post, tag) for tag in tags ])

    return graph


def main():
    blog_directory = "./public/blog/"
    blog_posts = list_blog_posts(blog_directory)

    affiliation_network = build_affiliation_network(blog_posts, blog_directory)
    graph_data = nx.node_link_data(affiliation_network)

    with open("./public/blog/graph.json", "w") as f:
        json.dump(graph_data, f)


if __name__ == "__main__":
    main()
